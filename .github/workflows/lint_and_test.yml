name: Lint and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Set up Python
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    # (Optional) Step 3: set thresholds for pylint and coverage
    - name: Set up thresholds
      id: thresholds
      run: |
        echo "pylint_threshold=2.5" >> $GITHUB_OUTPUT
        echo "coverage_threshold=25" >> $GITHUB_OUTPUT

    # Step 3: Install dependencies (including Anybadge)
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install anybadge
        cd app
        pip install -r requirements.txt
        pip install -r test/requirements-dev.txt

    # Step 4: Run pylint and calculate the score
    - name: Run pylint
      id: pylint
      run: |
        cd app
        pylint_score=$(pylint . --fail-under=${{ steps.thresholds.outputs.pylint_threshold }} --output-format=json:../reports/pylint.json,parseable | tee pylint-report.txt | awk '/Your code has been rated at/ {print $7}')
        echo "Pylint score is: $pylint_score"
        echo "pylint_score=$pylint_score" >> $GITHUB_OUTPUT

    # Step 5: Fail if pylint score is below threshold
    - name: Check pylint score
      if: ${{ steps.pylint.outputs.pylint_score < steps.thresholds.outputs.pylint_threshold }}
      run: |
        echo "Pylint score is below the required threshold. ${{ steps.pylint.outputs.pylint_score }} (required >${{ steps.thresholds.outputs.pylint_threshold }})"
        exit 1

    # Step 6: Run coverage and generate report
    - name: Run tests with coverage
      run: |
        coverage run -m pytest --tb=no --json-report --json-report-summary --json-report-indent=4 --json-report-file=../reports/pytest.json
        coverage report --fail-under=${{ steps.thresholds.outputs.coverage_threshold }}
        coverage json -o ../reports/coverage.json --pretty-print

    # Step 7: Extract coverage percentage
    - name: Extract coverage percentage
      id: coverage
      run: |
        coverage_percentage=$(coverage report | grep 'TOTAL' | awk '{print $4}' | sed 's/%//')
        echo "Coverage percentage is: $coverage_percentage"
        echo "coverage_percentage=$coverage_percentage" >> $GITHUB_OUTPUT

    # Step 8: Fail if coverage is below threshold
    - name: Check coverage score
      if: ${{ steps.coverage.outputs.coverage_percentage < steps.thresholds.outputs.coverage_threshold }}
      run: |
        echo "Coverage is below the required threshold. ${{ steps.coverage.outputs.coverage_percentage }}% (required >${{ steps.thresholds.outputs.coverage_threshold }}%)"
        exit 1

    # Step 9: Generate pylint badge using Anybadge
    - name: Generate pylint badge
      run: |
        rm img/pylint_badge.svg
        cd app
        anybadge --value=${{ steps.pylint.outputs.pylint_score }} --file=../img/pylint_badge.svg pylint

    # Step 10: Generate Pytest badge using Anybadge
    - name: Generate pytest badge
      run: |
        rm img/pytest_badge.svg
        anybadge --label=PyTest --value=PASS --file=pytest_badge.svg PASS=green

    # Step 11: Generate coverage badge using Anybadge
    - name: Generate coverage badge
      run: |
        rm img/coverage_badge.svg
        cd app
        coverage_percentage=$(coverage report | grep 'TOTAL' | awk '{print $4}' | sed 's/%//')
        anybadge --value=${{ steps.coverage.outputs.coverage_percentage }} --file=../img/coverage_badge.svg coverage

    # Step 12: Upload the badges and reports as GitHub artifacts (optional)
    - name: Upload pylint badge
      uses: actions/upload-artifact@v4
      with:
        name: pylint-badge
        path: img/pylint_badge.svg
    
    - name: Upload pytest badge
      uses: actions/upload-artifact@v4
      with:
        name: pytest-badge
        path: img/pytest_badge.svg

    - name: Upload coverage badge
      uses: actions/upload-artifact@v4
      with:
        name: coverage-badge
        path: img/coverage_badge.svg
    
    - name: Upload pylint report
      uses: actions/upload-artifact@v4
      with:
        name: pylint-report
        path: reports/pylint.json

    - name: Upload pytest report
      uses: actions/upload-artifact@v4
      with:
        name: pytest-report
        path: reports/pytest.json

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: reports/coverage.json

    # (Optional) Step 13: Commit the badges to the repo if you want them automatically updated
    - name: Commit badges
      run: |
        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Actions"
        git add img/pylint_badge.svg img/coverage_badge.svg img/pytest_badge.svg reports/pylint.json reports/coverage.json reports/pytest.json
        git commit -m "Update badges & reports"
        git push
