name: Lint and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Set up Python
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    # Step 3: set thresholds for pylint and coverage
    - name: Set up thresholds
      id: thresholds
      run: |
        echo "pylint_threshold=9" >> $GITHUB_OUTPUT
        echo "coverage_threshold=50" >> $GITHUB_OUTPUT
        echo "ALL_CHECKS_PASSED=true" >> $GITHUB_ENV  # Initialize with true

    # Step 4: Install dependencies (including Anybadge)
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install anybadge
        cd app
        pip install -r requirements.txt
        pip install -r test/requirements-dev.txt

    # Step 5: Run pylint and calculate the score
    - name: Run pylint
      id: pylint
      run: |
        cd app
        pylint_score=$(pylint . --fail-under=${{ steps.thresholds.outputs.pylint_threshold }} --output-format=json:../reports/pylint.json,parseable | tee pylint-report.txt | awk '/Your code has been rated at/ {print $7}')
        echo "Pylint score is: $pylint_score"
        echo "pylint_score=$pylint_score" >> $GITHUB_OUTPUT
      continue-on-error: true  # Do not fail the job yet

    # Step 6: Fail if pylint score is below threshold
    - name: Check pylint score
      if: ${{ steps.pylint.outputs.pylint_score < steps.thresholds.outputs.pylint_threshold }}
      run: |
        echo "Pylint score is below the required threshold. ${{ steps.pylint.outputs.pylint_score }} (required >${{ steps.thresholds.outputs.pylint_threshold }})"
        echo "ALL_CHECKS_PASSED=false" >> $GITHUB_ENV  # Mark that one check failed

    # Step 7: Run coverage and generate report
    - name: Run tests with coverage
      id: covtest
      run: |
        coverage run -m pytest --tb=no --json-report --json-report-summary --json-report-indent=4 --json-report-file=../reports/pytest.json
        coverage report --fail-under=${{ steps.thresholds.outputs.coverage_threshold }}
        coverage json -o ../reports/coverage.json --pretty-print
      continue-on-error: true  # Do not fail the job yet

    # Step 8: Check pytest result based on exit code
    - name: Check pytest result
      run: |
        if [ "${{ steps.covtest.outcome }}" == "failure" ]; then
          echo "Tests failed. Setting failure flag."
          echo "ALL_CHECKS_PASSED=false" >> $GITHUB_ENV
        fi

    # Step 8: Extract coverage percentage
    - name: Extract coverage percentage
      id: coverage
      run: |
        coverage_percentage=$(coverage report | grep 'TOTAL' | awk '{print $4}' | sed 's/%//')
        echo "Coverage percentage is: $coverage_percentage"
        echo "coverage_percentage=$coverage_percentage" >> $GITHUB_OUTPUT

    # Step 9: Fail if coverage is below threshold
    - name: Check coverage score
      if: ${{ steps.coverage.outputs.coverage_percentage < steps.thresholds.outputs.coverage_threshold }}
      run: |
        echo "Coverage is below the required threshold. ${{ steps.coverage.outputs.coverage_percentage }}% (required >${{ steps.thresholds.outputs.coverage_threshold }}%)"
        echo "ALL_CHECKS_PASSED=false" >> $GITHUB_ENV  # Mark that one check failed

    # Step 11: Generate Badges using Anybadge
    - name: Generate Badges
      run: |
        rm -f img/pylint_badge.svg
        anybadge --value=${{ steps.pylint.outputs.pylint_score }} --file=img/pylint_badge.svg pylint
        rm -f img/pytest_badge.svg
        if [ "${{ steps.covtest.outcome }}" == "failure" ]; then
          anybadge --label=PyTest --value=FAIL --file=img/pytest_badge.svg PASS=green FAIL=red
        fi
        if [ "${{ steps.covtest.outcome }}" == "success" ]; then
          anybadge --label=PyTest --value=PASS --file=img/pytest_badge.svg PASS=green FAIL=red
        fi
        rm -f img/coverage_badge.svg
        anybadge --value=${{ steps.coverage.outputs.coverage_percentage }} --file=img/coverage_badge.svg coverage

    # Step 13: Upload the badges and reports as GitHub artifacts (optional)
    - name: Upload badges an reports
      uses: actions/upload-artifact@v4
      with:
        name: pybadge-and-reports
        path: |
          img/pylint_badge.svg
          img/pytest_badge.svg
          img/coverage_badge.svg
          reports/pylint.json
          reports/pytest.json
          reports/coverage.json

    # (Optional) Step 14: Commit the badges to the repo if you want them automatically updated
    - name: Commit badges
      run: |
        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Actions"
        git add img/pylint_badge.svg img/coverage_badge.svg img/pytest_badge.svg reports/pylint.json reports/coverage.json reports/pytest.json
        git commit -m "Update badges & reports"
        git push
    
    # Step 6: Fail if the tests Failed
    - name: Check pylint score
      if: ${{ steps.pylint.outputs.pylint_score < steps.thresholds.outputs.pylint_threshold }}
      run: |
        exit 1
